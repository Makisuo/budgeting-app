/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appIndexImport } from './routes/__app.index'
import { Route as AuthSigninImport } from './routes/auth/signin'
import { Route as AuthRegisterImport } from './routes/auth/register'

// Create/Update Routes

const appIndexRoute = appIndexImport.update({
  id: '/__app/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSigninRoute = AuthSigninImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninImport
      parentRoute: typeof rootRoute
    }
    '/__app/': {
      id: '/__app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/auth/register': typeof AuthRegisterRoute
  '/auth/signin': typeof AuthSigninRoute
  '/': typeof appIndexRoute
}

export interface FileRoutesByTo {
  '/auth/register': typeof AuthRegisterRoute
  '/auth/signin': typeof AuthSigninRoute
  '/': typeof appIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/signin': typeof AuthSigninRoute
  '/__app/': typeof appIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth/register' | '/auth/signin' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth/register' | '/auth/signin' | '/'
  id: '__root__' | '/auth/register' | '/auth/signin' | '/__app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthSigninRoute: typeof AuthSigninRoute
  appIndexRoute: typeof appIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRegisterRoute: AuthRegisterRoute,
  AuthSigninRoute: AuthSigninRoute,
  appIndexRoute: appIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth/register",
        "/auth/signin",
        "/__app/"
      ]
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/signin": {
      "filePath": "auth/signin.tsx"
    },
    "/__app/": {
      "filePath": "__app.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
